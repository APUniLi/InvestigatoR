% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/backtesting_weights.R
\name{backtesting_weights}
\alias{backtesting_weights}
\title{Backtesting Portfolio Weights}
\usage{
backtesting_weights(
  data,
  return_label,
  benchmark_weights = NULL,
  mask_label = NULL,
  features,
  pf_config,
  portfolio_object = NULL,
  rolling = TRUE,
  window_size = "5 years",
  step_size = "1 month",
  offset = "1 month",
  in_sample = TRUE,
  num_cores = NULL,
  verbose = FALSE
)
}
\arguments{
\item{data}{Data frame in long format containing stock IDs, dates, and features.}

\item{return_label}{Column name of the actual return.}

\item{benchmark_weights}{Column name of the benchmark weights (optional).}

\item{mask_label}{Column name of the mask indicator (optional).}

\item{features}{Character vector of feature names used for weight prediction.}

\item{pf_config}{List of portfolio configuration options, including model configurations.}

\item{portfolio_object}{An existing portfolioReturns object to append results to (default: NULL).}

\item{rolling}{Logical indicating whether to use a rolling window approach.}

\item{window_size}{Character string specifying the window size (e.g., "5 years").}

\item{step_size}{Character string specifying the step size for the rolling window (e.g., "1 month").}

\item{offset}{Character string specifying the offset to avoid look-ahead bias.}

\item{in_sample}{Logical indicating whether to provide in-sample predictions.}

\item{num_cores}{Number of cores to use for parallel processing.}

\item{verbose}{Logical indicating whether to display detailed progress messages.}
}
\value{
An S3 object of class \code{portfolioReturns} containing the predicted weights and performance metrics.
}
\description{
This function predicts portfolio weights directly using neural networks and other models.
It applies custom loss functions while respecting constraints like turnover or leverage.
}
\examples{
\dontrun{
data(data_ml)
# Create a subset of data_ml for testing
test_data_ml <- data_ml \%>\%
  filter(stock_id <= 5)

return_label <- "R1M_Usd"
features <- c("Div_Yld", "Eps", "Mkt_Cap_12M_Usd", "Mom_11M_Usd", "Ocf", "Pb", "Vol1Y_Usd")

# Dummy weight function example (replace with your real model function)
dummy_weights_func <- function(train_data, test_data, config) {
  tibble::tibble(
    stock_id = test_data$stock_id,
    date = test_data$date,
    pred_weight = runif(nrow(test_data), -1, 1)  # Random weights for example
  )
}

pf_config <- list(
  dummy_weights = list(
    weight_func = "dummy_weights_func",
    config1 = list(min_weight = -0.5, max_weight = 0.5),
    config2 = list(min_weight = -0.5, max_weight = 0.5))
)

window_size <- "5 years"
step_size <- "1 year"
offset <- "1 month"
in_sample <- TRUE
num_cores <- 2

# Perform backtesting
portfolio <- backtesting_weights(
  data = test_data_ml,
  return_label = return_label,
  features = features,
  pf_config = pf_config,
  rolling = FALSE,
  window_size = window_size,
  step_size = step_size,
  offset = offset,
  in_sample = in_sample,
  num_cores = num_cores,
  verbose = TRUE
)
print(portfolio)
}
}
