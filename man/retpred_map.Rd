% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mappers.R
\name{retpred_map}
\alias{retpred_map}
\title{Return Prediction Mapping Function (Helper)}
\usage{
retpred_map(t, data_subset, indices, model_function, model_config)
}
\arguments{
\item{t}{Integer. Index of the current iteration.}

\item{data_subset}{Tibble. Subset of the data containing \code{stock_id}, \code{date}, \code{return_label}, and features.}

\item{indices}{Tibble. Contains \code{training_start}, \code{training_end}, \code{prediction_start}, and \code{prediction_end} dates.}

\item{model_function}{Character. Name of the prediction (model) function to be invoked.}

\item{model_config}{List. Configuration parameters for the model function.}
}
\value{
Tibble containing \code{stock_id}, \code{date}, and \code{pred_return}.
}
\description{
This helper function is used within \code{backtesting_returns} to map over time indices and generate return predictions using specified ML models.
}
\examples{
\dontrun{
data(data_ml)
# Create a subset of data_ml for testing
test_data_ml <- data_ml \%>\%
  filter(stock_id <= 5)

# Define common parameters for testing
return_label <- "R1M_Usd"
features <- c("Div_Yld", "Eps", "Mkt_Cap_12M_Usd", "Mom_11M_Usd", "Ocf", "Pb", "Vol1Y_Usd")

indices <- tibble::tibble(
  training_start = rep(as.Date("2012-01-01"), 2),
  training_end = rep(as.Date("2012-12-31"), 2),
  prediction_start = rep(as.Date("2013-01-01"), 2),
  prediction_end = rep(as.Date("2013-12-31"), 2)
)

# Dummy function for weight prediction (in place of keras_weights)
dummy_weights_func <- function(train_data, test_data, config) {
  tibble::tibble(
    stock_id = test_data$stock_id,
    date = test_data$date,
    predicted_weight = runif(nrow(test_data), -1, 1)  # Random weights for example
  )
}
dummy_weights_func(train_data_ml, test_data_ml, config)
# Use weight_map to predict weights for the specified time step
t <- 1  # First time index
predictions <- weightpred_map(
  t = t,
  data_subset = test_data_ml,
  indices = indices,
  model_function = "dummy_weights_func",
  model_config = list()
)
print(predictions)
}
}
