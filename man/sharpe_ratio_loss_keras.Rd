% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weight_pred_functions.R
\name{sharpe_ratio_loss_keras}
\alias{sharpe_ratio_loss_keras}
\title{Custom Sharpe Ratio Loss with Constraints for Keras Models}
\usage{
sharpe_ratio_loss_keras(
  y_true,
  y_pred,
  turnover_penalty_weight = 0.01,
  max_weight = 0.1,
  min_weight = 0,
  weights_sum = 1,
  abs_weights_sum = 1
)
}
\arguments{
\item{y_true}{Matrix with columns for stock_id, date, actual_return, and optional mask.}

\item{y_pred}{Predicted portfolio weights.}

\item{turnover_penalty_weight}{Numeric. Penalty for portfolio turnover (default: 0.01).}

\item{max_weight}{Numeric. Maximum weight for a single stock (default: 0.1).}

\item{min_weight}{Numeric. Minimum weight for a single stock (default: 0).}

\item{weights_sum}{Numeric. Target sum of portfolio weights (default: 1).}

\item{abs_weights_sum}{Numeric. Maximum absolute sum of portfolio weights (default: 1).}
}
\value{
Numeric. The loss value (negative Sharpe ratio) to minimize during training.
}
\description{
This function calculates the Sharpe ratio for portfolio optimization using Keras, incorporating constraints
like leverage, weight limits, and turnover. It supports both long-only and long-short portfolios.
The loss function is designed to maximize the Sharpe ratio while applying penalties for turnover and weight constraints.
}
\details{
\subsection{Arguments}{
\itemize{
\item \code{turnover_penalty_weight}: Penalty applied to turnover in the portfolio (default: 0.01).
\item \code{max_weight}: Maximum allowable weight for any single stock (default: 0.1).
\item \code{min_weight}: Minimum allowable weight for any single stock (default: 0).
\item \code{weights_sum}: Target sum of portfolio weights (default: 1 for long-only, 0 for market-neutral).
\item \code{abs_weights_sum}: Maximum absolute sum of portfolio weights to control leverage (default: 1 for long-only, higher for long-short).
}
}
}
\examples{
# Example: Simple portfolio with 3 stocks and 3 dates
# Generate a small example dataset
example_data <- data.frame(
  stock_id = c(1, 1, 2, 2, 3, 3,1,2,3),
    date = c(1, 2, 1, 2, 1, 2,3,3,3),
      actual_return = c(0.01, 0.02, -0.01, 0.01, 0.03, -0.02,0.04,0.05,0.06),
      mask = c(1, 1, 1, 1, 1, 1,0,0,0)
      )
# Predicted weights (this would come from your model in practice)
predicted_weights <- c(0.5, 0.6, 0.3, 0.2, 0.2, 0.2,0.,0.9,0.8)

# Convert data to TensorFlow tensors
y_true <- tf$constant(as.matrix(example_data), dtype = "float32")
y_pred <- tf$constant(predicted_weights, dtype = "float32")

# Calculate loss using the custom Sharpe ratio loss function
loss_value <- sharpe_ratio_loss_keras(
  y_true = y_true,
  y_pred = y_pred,
  turnover_penalty_weight = 0.005,
  max_weight = 0.5,
  min_weight = -0.5,
  weights_sum = 1,
  abs_weights_sum = 1
)
print(loss_value)
}
