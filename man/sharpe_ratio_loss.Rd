% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weight_pred_functions.R
\name{sharpe_ratio_loss}
\alias{sharpe_ratio_loss}
\title{Custom Sharpe Ratio Loss Function for Keras}
\usage{
sharpe_ratio_loss(
  transaction_costs = 0.001,
  delta = 0.1,
  lambda = 0.1,
  leverage = 1,
  eta = 0.1
)
}
\arguments{
\item{transaction_costs}{Numeric. Penalty applied to portfolio turnover (default: 0.001).}

\item{delta}{Numeric. Diversification target (default: 0.1).}

\item{lambda}{Numeric. Diversification penalty multiplier (default: 0.1).}

\item{leverage}{Numeric. Target portfolio leverage (default: 1.0).}

\item{eta}{Numeric. Leverage penalty multiplier (default: 0.1).}

\item{y_true}{Tensor. A matrix where each row contains \code{stock_id}, \code{date}, \code{actual_return}.}

\item{y_pred}{Tensor. Predicted portfolio weights.}
}
\value{
A scalar loss value that combines the negative Sharpe ratio with penalties for turnover, diversification, and leverage.
}
\description{
This function calculates a custom Sharpe ratio-based loss for portfolio optimization using Keras,
with penalties for turnover, lack of diversification, and leverage deviations.
}
\examples{
\dontrun{
library(keras3)
library(tensorflow)

# Example: simple portfolio with 3 stocks and 2 dates
example_data <- data.frame(
  stock_id = c(1, 1, 2, 2, 3, 3),
  date = c(1, 2, 1, 2, 1, 2),
  benchmark=rep(0, 6),
  actual_return = c(0.01, 0.02, -0.01, 0.01, 0.03, -0.02)
)

# Sample predicted weights
predicted_weights <- c(0.5, 0.6, 0.3, 0.2, 0.2, 0.2)

# Convert data to TensorFlow tensors
y_true <- tf$constant(as.matrix(example_data), dtype = "float32")
y_pred <- tf$constant(predicted_weights, dtype = "float32")

# Call the custom loss function
loss_value <- sharpe_ratio_loss(
  y_true = y_true,
  y_pred = y_pred,
  transaction_costs = 0.005,
  delta = 0.1,     # Diversification penalty weight
  lambda = 0.1,    # Diversification penalty multiplier
  leverage = 1.0,  # Target leverage
  eta = 0.1        # Leverage penalty multiplier
)

# Print the calculated loss value
print(loss_value)
}
}
