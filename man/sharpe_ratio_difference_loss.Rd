% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weight_pred_functions.R
\name{sharpe_ratio_difference_loss}
\alias{sharpe_ratio_difference_loss}
\title{Custom Sharpe Ratio Difference Loss Function with L1/L2 Regularization for Keras}
\usage{
sharpe_ratio_difference_loss(lambda_l1 = 0.01, lambda_l2 = 0.01)
}
\arguments{
\item{lambda_l1}{Numeric. L1 regularization coefficient (default: 0.01).}

\item{lambda_l2}{Numeric. L2 regularization coefficient (default: 0.01).}

\item{transaction_costs}{Numeric. Penalty applied to portfolio turnover (default: 0.001).}

\item{delta}{Numeric. Diversification target (default: 0.1).}

\item{lambda}{Numeric. Diversification penalty multiplier (default: 0.1).}

\item{leverage}{Numeric. Target portfolio leverage (default: 1.0).}

\item{eta}{Numeric. Leverage penalty multiplier (default: 0.1).}
}
\value{
A scalar loss value that combines the negative Sharpe ratio difference with L1/L2 regularization.
}
\description{
This function calculates a custom loss for portfolio optimization using Keras,
aiming to maximize the difference in Sharpe ratio between the portfolio and a benchmark
(e.g., S&P 500). It includes L1 and L2 regularization penalties to control the magnitude
and sparsity of portfolio weight adjustments.
}
\examples{
\dontrun{
# Example: simple portfolio with 3 stocks and 2 dates
example_data <- data.frame(
  stock_id = c(1, 1, 2, 2, 3, 3),
  date = c(1, 2, 1, 2, 1, 2),
  benchmark = c(0.4, 0.4, 0.3, 0.3, 0.3, 0.3),  # Benchmark weights
  actual_return = c(0.01, 0.02, -0.01, 0.01, 0.03, -0.02)  # Actual stock returns
)

# Sample predicted weight adjustments (delta_w) for each stock and date
predicted_weight_changes <- c(0.05, 0.06, -0.01, -0.02, -0.01, -0.01)

# Convert data to TensorFlow tensors
y_true <- tf$constant(as.matrix(example_data), dtype = "float32")
y_pred <- tf$constant(predicted_weight_changes, dtype = "float32")

# Call the custom loss function
loss_value <- sharpe_ratio_difference_loss(
  lambda_l1 = 0.01,    # L1 regularization coefficient
  lambda_l2 = 0.01     # L2 regularization coefficient
)

# Print the calculated loss value
print(loss_value)
}
}
